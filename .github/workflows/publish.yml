name: Build, Push Docker image to GHCR, Release, and Publish to PyPI

on:
  push:
    tags: [ 'v*' ]

jobs:
  build-and-push-ghcr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (owner, repo, version)
        id: meta
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LC=$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]')
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT
          echo "repo_name_lc=$REPO_NAME_LC" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ steps.meta.outputs.owner_lc }}/${{ steps.meta.outputs.repo_name_lc }}:latest
            ghcr.io/${{ steps.meta.outputs.owner_lc }}/${{ steps.meta.outputs.repo_name_lc }}:${{ github.sha }}
            ghcr.io/${{ steps.meta.outputs.owner_lc }}/${{ steps.meta.outputs.repo_name_lc }}:${{ steps.meta.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}

  bump-version-pr:
    needs: build-and-push-ghcr
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install tools
        run: pip install toml

      - name: Update version in pyproject.toml
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          python -c "import toml; d=toml.load('pyproject.toml'); d['project']['version']='$VERSION'; toml.dump(d, open('pyproject.toml','w'))"
      
      - name: Create Pull Request with version bump
        uses: peter-evans/create-pull-request@v6
        id: cpr
        with:
          commit-message: "chore: update version to ${{ steps.meta.outputs.version }} [skip ci]"
          branch: "bump-version-${{ steps.meta.outputs.version }}"
          title: "chore: bump version to ${{ steps.meta.outputs.version }}"
          body: "Automated version bump from workflow."
          base: main
          add-paths: pyproject.toml
          delete-branch: true

      - name: Enable auto-merge for the PR
        if: steps.cpr.outputs.pull-request-url != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_url="${{ steps.cpr.outputs.pull-request-url }}"
          pr_number=$(echo "$pr_url" | grep -oE '[0-9]+$')
          gh pr merge $pr_number --auto --merge || echo "Auto-merge skipped"

  publish-pypi:
    needs: bump-version-pr
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    environment:
      name: pypi
      url: https://pypi.org/p/apmcheck/
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*
